@page "/syncfusionform1"
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Navigations
@using MauiBlazorApp1.Pages.SyncfusionForm1

<Syncfusion.Blazor.Buttons.SfButton IsPrimary="true" OnClick="@OnBtnClick">Open dialog</Syncfusion.Blazor.Buttons.SfButton>
<br />

<Syncfusion.Blazor.Inputs.SfTextBox Placeholder='First Name' 
									FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" />
<br />
<Syncfusion.Blazor.Inputs.SfTextBox Placeholder='Last Name'
									FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" />
<br />
<SfSwitch Checked="true" OnLabel="Active" OffLabel="Inactive"></SfSwitch>
<br />

<SfMultiSelect TValue="string[]" TItem="DevelopmentSkills" Placeholder="Favorite Skills" DataSource="@Skills">
    <MultiSelectFieldSettings Text="Text" Value="ID"></MultiSelectFieldSettings>
</SfMultiSelect>


<div class="col-lg-12 control-section" id="target">
	<SfDialog Target="#target" Width="500px" ShowCloseIcon="true" @bind-Visible="Visibility">
		<DialogTemplates>
			<Header> About SYNCFUSION succinctly series </Header>
			<Content>
				<p>
					In the Succinctly series, Syncfusion created a robust, free library of more than 130 technical e - books formatted for PDF, Kindle, and EPUB.<br> <br>
					The Succinctly series was born in 2012 out of a desire to provide concise technical e-books for software developers. Each title in the Succinctly series
					is written by a carefully chosen expert and provides essential content in about 100 pages.
				</p>
			</Content>
		</DialogTemplates>
		<DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose"></DialogEvents>
		<DialogButtons>
			<DialogButton IsPrimary="true" Content="<a id='newTab' href='https://www.syncfusion.com/company/about-us' target='_blank'>Learn More</a>" OnClick="@OnBtnClick" />
		</DialogButtons>
	</SfDialog>

	<SfDropDownList TValue="string" TItem="DevelopmentSkills" PopupHeight="350px" PopupWidth="350px" Placeholder="Select a skill" DataSource="@Skills">
  <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
</SfDropDownList>

	<div class="control-section">
		<div class="checkbox-control">
			<div class="row">
				<SfCheckBox @bind-Checked="@isChecked" >Checkbox: @isChecked</SfCheckBox>
				
			</div>
			<div class="row">
				<SfCheckBox Disabled="true" @bind-Checked="@isDisabledChecked" Label="Checked, Disabled"></SfCheckBox>
			</div>
			<div class="row">
				<SfCheckBox Indeterminate="true" Disabled="true" Label="Indeterminate, Disabled" TChecked="bool"></SfCheckBox>
			</div>
		</div>
	</div>

	<SfDateTimePicker TValue="DateTime?" Value="@DateValue"></SfDateTimePicker>

	<button @onclick="@UpdateValue">Update Value</button>

</div>


<style>
	a, a:hover, .highcontrast #dialog a, .highcontrast #dialog a:hover {
		color: inherit;
		text-decoration: none;
	}

	.fabric #target .e-dialog {
		height: 306px;
	}

	.material #target .e-dialog {
		height: 270px;
	}

	.bootstrap4 #target .e-dialog {
		height: 305px;
	}

	#target .e-dialog {
		height: 270px;
	}

	#target {
		height: 500px;
	}

    .checkbox-control {
        margin: 12% 0 12% 40%;
    }
    @@media only screen and (max-width: 700px) {
        .checkbox-control {
            margin: 20% 0 0 32%;
        }
        .control-section {
            min-height: 200px;
        }
    }
    @@media only screen and (max-width: 500px) {
        .control-section {
            min-height: 200px;
        }
        .checkbox-control {
            margin-top: 5%;
            margin-left: 5%;
            margin-bottom: 5%;
        }
    }
    .control-section .row {
        margin: 20px 0;
    }



	
</style>

@code {
	   protected override void OnInitialized()
        {
			MainPage.hideWebBrowserFunction();
        }

	private bool Visibility { get; set; } = false;
	private bool ShowButton { get; set; } = true;
	private void OnBtnClick()
	{
		this.Visibility = true;
	}
	private void DialogOpen(Object args)
	{
		this.ShowButton = false;
	}
	private void DialogClose(Object args)
	{
		this.ShowButton = true;
	}


	//Combobox
	public class DevelopmentSkills
	{
		public string ID { get; set; }
		public string Text { get; set; }
	}
	List<DevelopmentSkills> Skills = new List<DevelopmentSkills> {
	new DevelopmentSkills() { ID= 1.ToString(), Text= "C#" },
	new DevelopmentSkills() { ID= 2.ToString(), Text= "JavaScript" },
	new DevelopmentSkills() { ID= 3.ToString(), Text= "MAUI" }
	};

	//Checkbox
	private bool isChecked = true;
	private bool isDisabledChecked = true;


	//Datepicker
	public DateTime? DateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 28);

	public void UpdateValue()
	{
		DateValue = DateTime.Now;
	}
}
